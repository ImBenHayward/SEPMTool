@model SEPMTool.Models.ViewModels.ProjectCreateViewModel

@{
    ViewData["Title"] = "Index";
}

<form asp-action="Create">
    <div class="container">
        <div class="page-header">
            <h1>Create a New Project</h1>
            <p class="lead">Project tasks can be added and assigned after the project is created.</p>
        </div>

        <div class="card">
            <div class="progress" style="height:5px">
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width:0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div v-show="step == 1">
                <div class="card-header">Step 1: General Details</div>
                <div class="card-body">
                    <div class="col auto"></div>
                    <div class="form-group row align-items-center">
                        <label for="name" class="col-2">Name</label>
                        <input v-model="projectModel.name" class="form-control col-4" placeholder="Project name" id="name" />
                        <div id="form-validation">
                            <i class="fas fa-check-circle"></i>
                            <i class="fas fa-exclamation-circle"></i>
                            <small>Error Message</small>
                            <input type="hidden" :value="projectModel.name" :name="'Name'" />
                        </div>
                    </div>
                    <div class="form-group row align-items-center">
                        <label class="col-2">Description</label>
                        <textarea v-model="projectModel.description" class="form-control col-4" rows="3" placeholder="Project description" id="description"></textarea>
                        <div id="form-validation">
                            <i class="fas fa-check-circle"></i>
                            <i class="fas fa-exclamation-circle"></i>
                            <small>Error Message</small>
                        </div>
                        <input type="hidden" :value="projectModel.description" :name="'Description'" />
                    </div>
                    <hr>
                    <h6>Timeline</h6>
                    <div class="form-group row align-items-center">
                        <label class="col-2">Start Date</label>
                        <input v-model="projectModel.startDate" class="form-control col-2" placeholder="Select a date" data-flatpickr data-alt-input="true" id="startDate" />
                        <div id="form-validation">
                            <i class="fas fa-check-circle"></i>
                            <i class="fas fa-exclamation-circle"></i>
                            <small>Error Message</small>
                        </div>
                        <input type="hidden" :value="projectModel.startDate" :name="'StartDate'" />
                    </div>
                    <div class="form-group row align-items-center">
                        <label class="col-2">Deadline</label>
                        <input v-model="projectModel.deadline" class="form-control col-2" placeholder="Select a date" data-flatpickr data-alt-input="true" id="deadline" />
                        <div id="form-validation">
                            <i class="fas fa-check-circle"></i>
                            <i class="fas fa-exclamation-circle"></i>
                            <small>Error Message</small>
                        </div>
                        <input type="hidden" :value="projectModel.deadline" :name="'Deadline'" />
                    </div>
                    <hr>
                    <h6>Project Priority</h6>
                    <div class="form-group row align-items-center">
                        <label class="col-2">Priority</label>
                        <select v-model="projectModel.priority" asp-items="Html.GetEnumSelectList<Priority>()" class="form-control col-2" id="priority">
                            <option disabled value=""></option>
                        </select>
                        <div id="form-validation">
                            <i class="fas fa-check-circle"></i>
                            <i class="fas fa-exclamation-circle"></i>
                            <small>Error Message</small>
                        </div>
                        <input type="hidden" :value="projectModel.priority" :name="'Priority'" />
                    </div>
                </div>
            </div>

            <div v-show="step == 2">
                <div class="card-header">Step 2: Project Requirements</div>
                <div class="card-body">
                    <div class="alert alert-danger text-center alert-dismissible" id="reqValidationAlert" style="display:none">
                        <button type="button" class="close" onclick="$('#reqValidationAlert').hide()" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <div id="reqValidationAlertDetails">Please add a project requirement before continuing.</div>
                    </div>
                    <div class="card-list-body" v-for="(requirement, index) in requirementsList">

                        <div class="card card-task">
                            <div class="card-body">
                                <div class="card-title">
                                    <a href="#">
                                        <h6 data-filter-by="text">
                                            <input type="hidden" :value='requirement.name' :name="'ProjectRequirements[' + index + '].name'" />
                                            {{ requirement.name }}
                                        </h6>
                                    </a>
                                    <span class="text-small">
                                        <input type="hidden" :value="requirement.description" :name="'ProjectRequirements[' + index + '].description'" />
                                        {{ requirement.description }}
                                    </span>
                                    <br />
                                    <span class="text-small">
                                        <input type="hidden" :value="requirement.category" :name="'ProjectRequirements[' + index + '].category'" />
                                        Category: {{ requirement.category }}
                                    </span>
                                    <br />
                                    <span class="text-small">
                                        <input type="hidden" :value="requirement.priority" :name="'ProjectRequirements[' + index + '].priority'" />
                                        Priority: {{ requirement.priority }}
                                    </span>
                                </div>
                                <div class="card-meta">
                                    <ul class="avatars">
                                        <li>
                                            <a href="#" data-toggle="tooltip" title="Kenny">
                                                <img alt="Kenny Tran" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                                            </a>
                                        </li>
                                    </ul>
                                    <div class="d-flex align-items-center">
                                        <i class="material-icons">playlist_add_check</i>
                                        <span>3/4</span>
                                    </div>
                                    <div class="dropdown card-options">
                                        <button class="btn-options" type="button" id="task-dropdown-button-1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <i class="material-icons">more_vert</i>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-right">
                                            <a class="dropdown-item" @@click="requirementClicked(requirement, index)">Edit</a>
                                            <div class="dropdown-divider"></div>
                                            <a class="dropdown-item text-danger" @@click="deleteRequirement(index)">Delete</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*</div>*@
                    <br />
                    <button role="button" type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#new-requirement-modal">
                        New Requirement
                    </button>
                </div>
            </div>

            <div v-show="step == 3">
                <div class="card-header">Step 3: Project Members</div>
                <div class="card-body">
                    @*<div class="tab-pane fade" id="project-add-members" role="tabpanel">*@
                    <div class="users-manage" data-filter-list="form-group-users">
                        <div class="input-group input-group-round">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="material-icons">filter_list</i>
                                </span>
                            </div>
                            <input type="search" class="form-control filter-list-input" placeholder="Filter members" aria-label="Filter Members">
                        </div>
                        <div class="form-group-users">

                            @for (int i = 0; i < Model.AllUsers.Count; i++)
                            {
                                <div class="custom-control custom-checkbox">
                                    <input asp-for="@Model.AllUsers[i].IsSelected" type="checkbox" class="custom-control-input" />
                                    <label asp-for="@Model.AllUsers[i].IsSelected" class="custom-control-label">
                                        <span class="d-flex align-items-center">
                                            <img alt="Kenny Tran" src="~/assets/img/defaultUserIcon.jpg" class="avatar mr-2" />
                                            <span class="h6 mb-0" data-filter-by="text">@Model.AllUsers[i].Username</span>
                                        </span>
                                    </label>
                                    <input asp-for="@Model.AllUsers[i].UserId" type="hidden" />
                                    <input asp-for="@Model.AllUsers[i].Username" type="hidden" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" type="button" v-show="step !== 1" @@click="prevStep">Previous Step</button>
                <button class="btn btn-primary float-lg-right" type="button" v-show="step != totalsteps" @@click="nextStep">Next Step</button>
                <span v-show="step == 3"><button class="btn btn-primary float-right" type="submit" @@onclick="nextStep">Create Project</button></span>
            </div>
        </div>

        @* New Requirements Modal *@
        <div class="modal fade" id="new-requirement-modal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add a New Requirement</h5>
                        <button type="button" class="close btn btn-round" data-dismiss="modal" aria-label="Close">
                            <i class="material-icons">close</i>
                        </button>
                    </div>
                    <!--end of modal head-->
                    <div class="modal-body">
                        <div>
                            <div class="tab-content">
                                <h6>Requirement Details</h6>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Title</label>
                                    <input v-model="requirement.name" class="form-control col" placeholder="Requirement title" id="reqname" />
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small>Error Message</small>
                                    </div>
                                </div>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Description</label>
                                    <textarea v-model="requirement.description" class="form-control col" rows="3" placeholder="Requirement description" id="reqdescription"></textarea>
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small>Error Message</small>
                                    </div>
                                </div>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Category</label>
                                    <select v-model="requirement.category" asp-items="Html.GetEnumSelectList<RequirementCategory>()" class="form-control col-3" id="reqcategory">
                                        <option value=""></option>
                                    </select>
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small>Error Message</small>
                                    </div>
                                </div>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Priority</label>
                                    <select v-model="requirement.priority" asp-items="Html.GetEnumSelectList<Priority>()" class="form-control col-3" id="reqpriority">
                                        <option value=""></option>
                                    </select>
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small>Error Message</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--end of modal body-->
                    <div class="modal-footer">
                        <button type="button" role="button" class="btn btn-primary" @@click="addRequirement">
                            Add Requirement
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Edit Requirements Modal *@
    <div id="edit-requirement-modal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Requirement</h5>
                    <button type="button" class="close btn btn-round" data-dismiss="modal" aria-label="Close">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <div class="modal-body">
                    <div>
                        <div class="tab-content">
                            <h6>Requirement Details</h6>
                            <div class="form-group row">
                                <label class="col-3">Title</label>
                                <input v-model="requirement.name" class="form-control col" placeholder="Requirement title" />
                            </div>
                            <div class="form-group row align-items-center">
                                <label class="col-3">Description</label>
                                <input v-model="requirement.description" class="form-control col" rows="3" placeholder="Requirement description" />
                            </div>

                            <div class="form-group row align-items-center">
                                <label class="col-3">Category</label>
                                <select v-model="requirement.category" asp-items="Html.GetEnumSelectList<RequirementCategory>()" class="form-control col-3" id="priority">
                                    <option value=""></option>
                                </select>
                            </div>
                            <div class="form-group row align-items-center">
                                <label class="col-3">Priority</label>
                                <select v-model="requirement.priority" asp-items="Html.GetEnumSelectList<Priority>()" class="form-control col-3" id="priority">
                                    <option value=""></option>
                                </select>
                                <input asp-for="RequirementIndex" type="hidden" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" role="button" class="btn btn-primary" data-dismiss="modal" @@click="editRequirement(requirement.index)">
                        Update Requirement
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        vueMixins.push({
            data: {

                step: 1,
                totalsteps: 3,

                projectModel: {
                    name: null,
                    description: null,
                    startDate: null,
                    deadline: null,
                    priority: null,
                },
                validation: {
                    nameValidation: '',
                },
                requirement:
                {
                    index: '',
                    name: '',
                    description: '',
                    category: '',
                    priority: ''
                },
                requirementsList: []
            },
            methods: {
                nextStep: function () {
                    if (this.step == 1) {
                        if (this.checkInputsP1()) {
                            this.setProgressBar(this.step++);
                            return true;
                        }
                    }
                    if (this.step == 2) {
                        if (this.checkInputsP2()) {
                            this.setProgressBar(this.step++);
                        }
                    }
                },
                prevStep: function () {
                    this.setProgressBar(this.step--);
                },
                addRequirement: function () {
                    if (this.checkInputsRequirementsModal()) {
                        $('#new-requirement-modal').modal('hide');
                        const clone = Object.assign({}, this.requirement);
                        this.requirementsList.push(clone);
                        this.requirement = {
                            index: '',
                            name: '',
                            description: '',
                            category: '',
                            priority: ''
                        };
                    }
                },
                checkInputsP1: function () {
                    const name = document.getElementById('name');
                    const description = document.getElementById('description');
                    const startDate = document.getElementById('startDate');
                    const deadline = document.getElementById('deadline');
                    const priority = document.getElementById('priority');
                    var currentDate = new Date();

                    if (!this.projectModel.name) {
                        this.setErrorFor(name, "Enter a project name.");
                    } else {
                        this.setSuccessFor(name);
                    }

                    if (!this.projectModel.description) {
                        this.setErrorFor(description, "Enter a project description.");
                    } else {
                        this.setSuccessFor(description);
                    }

                    if (this.projectModel.startDate < currentDate) {
                        this.setErrorFor(startDate, "Enter a project start date.");
                    } else {
                        this.setSuccessFor(startDate);
                    }

                    if (this.projectModel.deadline < currentDate) {
                        this.setErrorFor(deadline, "Enter a project deadline.");
                    } else {
                        this.setSuccessFor(deadline);
                    }

                    if (!this.projectModel.priority) {
                        this.setErrorFor(priority, "Enter a project priority.");
                    } else {
                        this.setSuccessFor(priority);
                    }

                    if (name.parentElement.classList.contains("success")
                        && description.parentElement.classList.contains("success")
                        && startDate.parentElement.classList.contains("success")
                        && deadline.parentElement.classList.contains("success")
                        && priority.parentElement.classList.contains("success")) {
                        return true;
                    }
                },
                checkInputsP2: function () {
                    if (this.requirementsList.length > 0) {
                        return true;
                    } else {
                        $('#reqValidationAlert').fadeTo(2000, 500).slideUp(500, function () {
                            $("#reqValidationAlert").slideUp(500);
                        });
                    }
                },
                checkEmptyRequirements: function () {
                    if (this.requirementsList.length > 0) {
                        return true;
                    } else {
                        $('#reqValidationAlert').fadeTo(2000, 500).slideUp(500, function () {
                            $("#reqValidationAlert").slideUp(500);
                        });
                    }
                },
                checkInputsRequirementsModal: function () {
                    const name = document.getElementById('reqname');
                    const description = document.getElementById('reqdescription');
                    const category = document.getElementById('reqcategory');
                    const priority = document.getElementById('reqpriority');

                    if (!this.requirement.name) {
                        this.setErrorFor(name, "Required!");
                    } else {
                        this.setSuccessFor(name);
                    }

                    if (!this.requirement.description) {
                        this.setErrorFor(description, "Required!");
                    } else {
                        this.setSuccessFor(description);
                    }

                    if (!this.requirement.category) {
                        this.setErrorFor(category, "Required!");
                    } else {
                        this.setSuccessFor(category);
                    }

                    if (!this.requirement.priority) {
                        this.setErrorFor(priority, "Required!");
                    } else {
                        this.setSuccessFor(priority);
                    }

                    if (name.parentElement.classList.contains("success")
                        && description.parentElement.classList.contains("success")
                        && category.parentElement.classList.contains("success")
                        && priority.parentElement.classList.contains("success")) {
                        name.parentElement.classList.remove("success");
                        description.parentElement.classList.remove("success");
                        category.parentElement.classList.remove("success");
                        priority.parentElement.classList.remove("success");
                        return true;
                    }
                },
                setErrorFor: function (input, message) {
                    const formGroup = input.parentElement;
                    const small = formGroup.querySelector('small');
                    small.innerText = message;
                    formGroup.className = 'form-group row align-items-center error';
                },
                setSuccessFor: function (input) {
                    const formGroup = input.parentElement;
                    formGroup.className = 'form-group row align-items-center success';
                },
                editRequirement: function (index) {
                    //this.requirementsList[index] = this.requirement;
                    const clone = Object.assign({}, this.requirement);
                    this.requirementsList.splice(index, 1, clone);
                    console.log(index);
                },
                deleteRequirement: function (index) {
                    this.requirementsList.splice(index, 1);
                },
                requirementClicked: function (requirement, index) {
                    this.requirement.index = index;
                    this.requirement.name = requirement.name;
                    this.requirement.description = requirement.description;
                    this.requirement.category = requirement.category;
                    this.requirement.priority = requirement.priority;
                    $('#edit-requirement-modal').modal('show');
                },
                setProgressBar: function () {
                    var step = this.step - 1;
                    var steps = this.totalsteps - 1;
                    var $progressBar = $('.progress-bar');
                    var percent = parseFloat(100 / steps) * step;
                    console.log(percent);
                    percent = percent.toFixed();
                    $progressBar.css('width', percent + "%");

                    if (this.step == 3) {
                        $progressBar.css('border-radius', '320px');
                    } else {
                        $progressBar.css('border-radius', '.5rem 0px');
                    }
                },
            }
        });
    </script>
}