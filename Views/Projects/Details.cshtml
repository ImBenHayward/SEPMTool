@model SEPMTool.Models.ViewModels.ProjectDetailsViewModel

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-11 col-xl-10">

            @*

                PROJECT INFORMATION

            *@
            <div class="page-header">
                <h1>{{this.projectModel.project.name}}</h1>
                <p class="lead">{{this.projectModel.project.description}}</p>
                <div class="d-flex align-items-center">
                    <ul class="avatars">
                        <li v-for="user in this.projectModel.project.users">
                            <a href="#" data-toggle="tooltip" data-placement="top" :title="user.username">
                                <img alt="user.username" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                            </a>
                        </li>
                    </ul>
                    <button class="btn btn-round" data-toggle="modal" data-target="#user-manage-modal">
                        <i class="material-icons">add</i>
                    </button>
                </div>
                <div>
                    <div class="progress" style="height: 10px">
                        <div class="progress-bar bg-success" :style="{ width: this.projectModel.project.progress + '%' }"></div>
                    </div>
                    <div class="d-flex justify-content-between text-small">
                        <div class="d-flex align-items-center">
                            <i class="material-icons">playlist_add_check</i>
                            <span>{{totalTasksCompleted}}/{{totalTasks}}</span>
                        </div>
                        <span>Due: {{GetDateFromNow(this.projectModel.project.deadline)}}</span>
                    </div>
                </div>
            </div>


            @*

                TAB LIST

            *@
            <ul class="nav nav-tabs nav-fill" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="tab" href="#requirements" role="tab" aria-controls="requirements" aria-selected="true">Requirements</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#Kanban" role="tab" aria-controls="requirements" aria-selected="true">Kanban</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#activity" role="tab" aria-controls="awards" aria-selected="false">Activity</a>
                </li>
            </ul>

            <div class="tab-content">


                @*

                    REQUIREMENTS SECTION

                *@
                <div class="tab-pane fade show active" id="requirements" role="tabpanel" data-filter-list="dropzone-previews">
                    <div class="content-list">
                        <div class="row content-list-head">
                            <div class="col-auto">
                                <h3>Requirements</h3>

                                <button class="btn btn-round" v-on:click="openNewRequirementModal">
                                    <i class="material-icons">add</i>
                                </button>
                            </div>
                        </div>

                        <div v-for="(req, index) in this.projectModel.project.projectRequirements">

                            <h5 class="requirement-badge"><span class="badge badge-pill badge-light" style="">Requirement {{index +1}}</span></h5>
                            @*<h5 class="requirement-badge"><span class="badge badge-pill" style="background-color:#bccdff; color: white">Requirement {{index +1}}</span></h5>*@
                            @*Requirement {{index +1}}
                                <hr class="requirement-heading-hr" />*@

                            <div class="tabBlock">
                                <ul class="tabBlock-tabs">
                                    <li class="tabBlock-tab is-active">Details</li>
                                    <li class="tabBlock-tab">Tasks</li>
                                    <li class="tabBlock-tab" v-on:click="sortComments(req.comments)">Comments</li>
                                </ul>
                                <div class="tabBlock-content">
                                    <div class="tabBlock-pane">
                                        <div class="media-body d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6>{{req.name}}</h6>
                                                <span class="text-small" data-filter-by="text">{{req.description}}</span>
                                                <br />
                                                <div class="requirement-info">
                                                    @* Priority *@
                                                    <span class="badge badge-pill badge-success-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Priority" v-if="req.priority == 0">Very Low</span>
                                                    <span class="badge badge-pill badge-success-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Priority" v-if="req.priority == 1">Low</span>
                                                    <span class="badge badge-pill badge-warning-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Priority" v-if="req.priority == 2">Medium</span>
                                                    <span class="badge badge-pill badge-danger-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Priority" v-if="req.priority == 3">High</span>
                                                    <span class="badge badge-pill badge-danger-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Priority" v-if="req.priority == 4">Very High</span>
                                                    @* Category *@

                                                    <b-badge class="badge badge-pill badge-info-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Category" v-if="req.category == 0">Functional</b-badge>
                                                    <b-badge class="badge badge-pill badge-info-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Category" v-if="req.category == 1">Non-Functional</b-badge>
                                                    <b-badge class="badge badge-pill badge-info-light" data-toggle="tooltip" data-placement="bottom" title="Requirement Category" v-if="req.category == 2">Domain</b-badge>
                                                </div>
                                            </div>
                                            <div class="dropdown">
                                                <button class="btn-options" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <i class="material-icons">more_vert</i>
                                                </button>
                                                <div class="dropdown-menu dropdown-menu-right">
                                                    <a class="dropdown-item" href="#" v-on:click="openEditRequirementModal(req, index)">Edit</a>
                                                    <div class="dropdown-divider"></div>
                                                    <a class="dropdown-item text-danger" href="#" v-on:click="DeleteRequirement(req.id, index)">Delete</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tabBlock-pane">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span>
                                                @*<span class="h6-requirement align-self-center span-requirement"><i class="fas fa-tasks title-icon"></i>Requirement Tasks</span>*@
                                                <span class="span-requirement" v-show="!req.tasks.length">No tasks added!</span>
                                                <a id="showRequirements" class="button_style" @@click="ShowTasks(req.id)" onmouseover="" style="cursor: pointer;" v-show="req.tasks.length > 0"></a>
                                            </span>

                                            <button class="btn btn-primary" v-on:click="OpenModal(req.id, index)">
                                                Add Task
                                            </button>
                                        </div>
                                        <div class="card-list-body child">
                                            <div :id="`accordion-${req.id}`">
                                                <div class="card card-task requirements-card" v-for="(task, taskIndex) in req.tasks">
                                                    <div class="progress" style="height:5px">
                                                        <div :class="{'progress-bar':true, 'bg-success':(task.progress === 100 || task.isComplete), 'progress-complete':(task.progress === 100 || task.isComplete)}" :style="{width: task.progress + '%'}" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>
                                                    <div class="card-header-requirements d-flex justify-content-between align-items-center">
                                                        <a id="showRequirements" class="button_style" @@click="ShowTask(task.id)" onmouseover="" style="cursor: pointer;">{{task.name}} <i :id="`chevron-${task.id}`" class="fas fa-chevron-circle-down align-items-center rotate req-chevron align-self-center"></i></a>
                                                        <div class="row">
                                                            <span onmouseover="" style="cursor: pointer;" v-on:click="EditTask(task, taskIndex, index)">
                                                                <i class="fas fa-pencil-alt"></i>
                                                            </span>
                                                            <span onmouseover="" style="cursor: pointer;" v-on:click="DeleteTask(task.id, taskIndex, index)">
                                                                <i class="taskBarIcon fas fa-trash-alt"></i>
                                                            </span>
                                                            <span onmouseover="" style="cursor: pointer;" v-on:click="ToggleTaskComplete(task, taskIndex, index, task.isCompleted)">
                                                                <i :class="{'fas':true, 'fa-check-circle':true, 'completedTask':(task.isCompleted), 'taskBarIcon':true, 'taskTickIcon':true}"></i>
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div :id="`task-${task.id}`" :class="{'disabled-div':(task.isCompleted)}" style="display:none" aria-labelledby="headingOne">
                                                        <div class="card-body">
                                                            <div class="card-title" style="max-width: 60%">
                                                                <span class="text-small">{{task.description}}</span>
                                                            </div>
                                                            <div class="card-meta">
                                                                <ul class="avatars">
                                                                    <li v-for="user in task.users">
                                                                        <a href="#" data-toggle="tooltip" :title="user.username">
                                                                            <img :alt="user.username" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                                                                        </a>
                                                                    </li>
                                                                </ul>
                                                                <div class="d-flex align-items-center">
                                                                    <i class="material-icons">playlist_add_check</i>
                                                                    <span>{{ task.subTasks.filter((x,i) => { return x.isCompleted; }).length }}/{{ task.subTasks.length }}</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <hr />
                                                        <div class="card-subtasks">
                                                            <span>
                                                                <span class="h6-requirement align-self-center">Sub-Tasks</span>
                                                                <a id="showRequirements" class="button_style" @@click="ShowSubTasks(task.id)" onmouseover="" style="cursor: pointer;"><i :id="`subtask-chevron-${task.id}`" class="fas fa-chevron-circle-down align-items-center rotate"></i></a>
                                                            </span>
                                                            <div :id="`accordion-${task.id}`" style="display:none">
                                                                <div v-for="(subtask, subTaskIndex) in task.subTasks">

                                                                    <div v-if="subtask.isCompleted === false">
                                                                        <input type="checkbox" @@click="subtaskToggle(subtask.id, subTaskIndex, taskIndex, index, subtask.isCompleted)" />
                                                                        {{subtask.description}}
                                                                    </div>

                                                                    <div v-if="subtask.isCompleted === true">
                                                                        <input type="checkbox" checked @@click="subtaskToggle(subtask.id, subTaskIndex, taskIndex, index, subtask.isCompleted)" />
                                                                        <strike>
                                                                            {{subtask.description}}
                                                                        </strike>
                                                                    </div>

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tabBlock-pane">
                                        <div class="d-flex flex-row-reverse bd-highlight">
                                            <button class="btn btn-primary new-comment-button" type="button" v-on:click="OpenCommentsModal(req.id)">New Comment</button>
                                        </div>
                                        <tree-comments v-for="(comment, commentIndex) in tree"
                                                       :id="comment.id"
                                                       :req-id="req.id"
                                                       :comment-user="comment.userId"
                                                       :current-user="comment.currentUser"
                                                       :first-name="comment.firstName"
                                                       :last-name="comment.lastName"
                                                       :date-time="comment.dateTime"
                                                       :children="comment.children || []"
                                                       :comment-body="comment.commentBody" />
                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--end of content list-->
                </div>


                @*

                    KANBAN SECTION

                *@
                <div class="tab-pane fade" id="Kanban" role="tabpanel" data-filter-list="dropzone-previews">

                    <div class="row content-list-head">
                        <div class="col-auto">
                            <h3>Kanban Board</h3>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-3">
                            <div class="p-2 alert alert-secondary" onmouseover="" style="cursor: pointer;">
                                <h5>Backlog</h5>
                                <draggable class="list-group kanban-column" :list="arrBacklog" :options="{animation:200, group:'tasks'}" @@add="onAdd($event, 0)">
                                    <div class="card card-kanban" v-for="(task, index) in arrBacklog" :key="task.id" :data-id="task.id">
                                        <div class="progress">
                                            <div :class="{'progress-bar':true, 'bg-success':(task.progress === 100 || task.isComplete), 'progress-complete':(task.progress === 100 || task.isComplete)}" role="progressbar" :style="{width: task.progress + '%'}" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <div class="card-body">
                                            <div class="dropdown card-options">
                                                <button class="btn-options" type="button" id="kanban-dropdown-button-14" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <i class="material-icons">more_vert</i>
                                                </button>
                                                <div class="dropdown-menu dropdown-menu-right">
                                                    <a class="dropdown-item" href="#">Edit</a>
                                                    <a class="dropdown-item text-danger" href="#">Archive Card</a>
                                                </div>
                                            </div>
                                            <div class="card-title">
                                                <a href="#" data-toggle="modal" data-target="#task-modal">
                                                    {{ task.name }}
                                                </a>
                                            </div>

                                            <ul class="avatars">
                                                <li v-for="user in task.users">
                                                    <a href="#" data-toggle="tooltip" :title="user.username">
                                                        <img :alt="user.username" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                                                    </a>
                                                </li>
                                            </ul>

                                            <div class="card-meta d-flex justify-content-between">
                                                <span><b-badge pill variant="success" data-toggle="tooltip" data-placement="bottom" title="Task Priority">Priority?</b-badge></span>
                                                <div class="d-flex align-items-center">
                                                    <i class="material-icons">playlist_add_check</i>
                                                    <span>{{ task.subTasks.length }}</span>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </draggable>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="p-2 alert alert-secondary" onmouseover="" style="cursor: pointer;">
                                <h5>In Progress</h5>
                                <draggable class="list-group kanban-column" :list="arrInProgress" :options="{animation:200, group:'tasks'}" @@add="onAdd($event, 1)">
                                    <div class="card card-kanban" v-for="task in arrInProgress" :key="task.id" :data-id="task.id" style="border-color: #CCE5FF; border-width: 2px">
                                        <div class="progress">
                                            <div :class="{'progress-bar':true, 'bg-success':(task.progress === 100 || task.isComplete), 'progress-complete':(task.progress === 100 || task.isComplete)}" role="progressbar" :style="{width: task.progress + '%'}" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <div class="card-body">
                                            <div class="dropdown card-options">
                                                <button class="btn-options" type="button" id="kanban-dropdown-button-14" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <i class="material-icons">more_vert</i>
                                                </button>
                                                <div class="dropdown-menu dropdown-menu-right">
                                                    <a class="dropdown-item" href="#">Edit</a>
                                                    <a class="dropdown-item text-danger" href="#">Archive Card</a>
                                                </div>
                                            </div>
                                            <div class="card-title">
                                                <a href="#" data-toggle="modal" data-target="#task-modal">
                                                    {{ task.name }}
                                                </a>
                                            </div>

                                            <ul class="avatars">
                                                <li v-for="user in task.users">
                                                    <a href="#" data-toggle="tooltip" :title="user.username">
                                                        <img :alt="user.username" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                                                    </a>
                                                </li>
                                            </ul>

                                            <div class="card-meta d-flex justify-content-between">
                                                <span><b-badge pill variant="success" data-toggle="tooltip" data-placement="bottom" title="Task Priority">Priority?</b-badge></span>
                                                <div class="d-flex align-items-center">
                                                    <i class="material-icons">playlist_add_check</i>
                                                    <span>{{ task.subTasks.length }}</span>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </draggable>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="p-2 alert alert alert-secondary" onmouseover="" style="cursor: pointer;">
                                <h5>Testing</h5>
                                <draggable class="list-group kanban-column" :list="arrTested" :options="{animation:200, group:'tasks'}" @@add="onAdd($event, 2)">
                                    <div class="card card-kanban" v-for="task in arrTested" :key="task.id" :data-id="task.id" style="border-color: #FFF3CD; border-width: 2px">
                                        <div class="progress">
                                            <div :class="{'progress-bar':true, 'bg-success':(task.progress === 100 || task.isComplete), 'progress-complete':(task.progress === 100 || task.isComplete)}" role="progressbar" :style="{width: task.progress + '%'}" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <div class="card-body">
                                            <div class="dropdown card-options">
                                                <button class="btn-options" type="button" id="kanban-dropdown-button-14" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <i class="material-icons">more_vert</i>
                                                </button>
                                                <div class="dropdown-menu dropdown-menu-right">
                                                    <a class="dropdown-item" href="#">Edit</a>
                                                    <a class="dropdown-item text-danger" href="#">Archive Card</a>
                                                </div>
                                            </div>
                                            <div class="card-title">
                                                <a href="#" data-toggle="modal" data-target="#task-modal">
                                                    {{ task.name }}
                                                </a>
                                            </div>

                                            <ul class="avatars">
                                                <li v-for="user in task.users">
                                                    <a href="#" data-toggle="tooltip" :title="user.username">
                                                        <img :alt="user.username" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                                                    </a>
                                                </li>
                                            </ul>

                                            <div class="card-meta d-flex justify-content-between">
                                                <span><b-badge pill variant="success" data-toggle="tooltip" data-placement="bottom" title="Task Priority">Priority?</b-badge></span>
                                                <div class="d-flex align-items-center">
                                                    <i class="material-icons">playlist_add_check</i>
                                                    <span>{{ task.subTasks.length }}</span>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </draggable>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="p-2 alert alert-secondary" onmouseover="" style="cursor: pointer;">
                                <h5>Done</h5>
                                <draggable class="list-group kanban-column" :list="arrDone" :options="{animation:200, group:'tasks'}" @@add="onAdd($event, 3)">
                                    <div class="card card-kanban" v-for="task in arrDone" :key="task.id" :data-id="task.id" style="border-color: #D4EDDA; border-width: 2px;">
                                        <div class="progress">
                                            <div :class="{'progress-bar':true, 'bg-success':(task.progress === 100 || task.isComplete), 'progress-complete':(task.progress === 100 || task.isComplete)}" role="progressbar" :style="{width: task.progress + '%'}" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <div class="card-body">
                                            <div class="dropdown card-options">
                                                <button class="btn-options" type="button" id="kanban-dropdown-button-14" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <i class="material-icons">more_vert</i>
                                                </button>
                                                <div class="dropdown-menu dropdown-menu-right">
                                                    <a class="dropdown-item" href="#">Edit</a>
                                                    <a class="dropdown-item text-danger" href="#">Archive Card</a>
                                                </div>
                                            </div>
                                            <div class="card-title">
                                                <a href="#" data-toggle="modal" data-target="#task-modal">
                                                    {{ task.name }}
                                                </a>
                                            </div>

                                            <ul class="avatars">
                                                <li v-for="user in task.users">
                                                    <a href="#" data-toggle="tooltip" :title="user.username">
                                                        <img :alt="user.username" class="avatar" src="~/assets/img/defaultUserIcon.jpg" />
                                                    </a>
                                                </li>
                                            </ul>

                                            <div class="card-meta d-flex justify-content-between">
                                                <span><b-badge pill variant="success" data-toggle="tooltip" data-placement="bottom" title="Task Priority">Priority?</b-badge></span>
                                                <div class="d-flex align-items-center">
                                                    <i class="material-icons">playlist_add_check</i>
                                                    <span>{{ task.subTasks.length }}</span>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </draggable>
                            </div>
                        </div>
                    </div>

                </div>


                @*

                    ACTIVITY SECTION

                *@
                <div class="tab-pane fade" id="activity" role="tabpanel" data-filter-list="list-group-activity">
                    <div class="content-list">
                        <div class="row content-list-head">
                            <div class="col-auto">
                                <h3>Activity</h3>
                            </div>
                        </div>
                        <div class="content-list-body">
                            <ol class="list-group list-group-activity">
                                <li class="list-group-item" v-for="(update, index) in this.projectModel.project.updates.slice().reverse()">
                                    <div class="media align-items-center">
                                        <div class="avatars">
                                            <div class="avatar bg-success" v-if="update.type === 0">
                                                <i class="material-icons" v-if="update.type === 0">create_new_folder</i>
                                            </div>

                                            <div class="avatar bg-primary" v-if="update.type === 1">
                                                <i class="material-icons" v-if="update.type === 1">edit</i>
                                            </div>

                                            <div class="avatar bg-danger" v-if="update.type === 2">
                                                <i class="material-icons" v-if="update.type === 2">delete_forever</i>
                                            </div>

                                        </div>
                                        <div class="media-body">
                                            <div>
                                                <span class="h6" data-filter-by="text">{{update.title}}</span>
                                                <div>
                                                    <span data-filter-by="text">{{update.description}}</span>
                                                </div>
                                            </div>
                                            <span class="text-small" data-filter-by="text">{{ update.date | moment("Do MMMM, h:mmA") }}</span>
                                        </div>
                                    </div>
                                </li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @*

        ADD USERS MODAL

    *@
    <form asp-action="AddUsers" class="modal fade" id="user-manage-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Project Users</h5>
                    <button type="button" class="close btn btn-round" data-dismiss="modal" aria-label="Close">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <!--end of modal head-->
                <div class="modal-body">
                    <div class="users-manage" data-filter-list="form-group-users">
                        <div class="mb-3">
                            <ul class="avatars text-center">
                                @foreach (var user in Model.Project.Users)
                                {
                                    <li>
                                        <img alt="@user.Username" src="~/assets/img/defaultUserIcon.jpg" class="avatar" data-toggle="tooltip" data-title="@user.Username" />
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="input-group input-group-round">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="material-icons">filter_list</i>
                                </span>
                            </div>
                            <input type="search" class="form-control filter-list-input" placeholder="Filter members" aria-label="Filter Members">
                        </div>
                        <div class="form-group-users">
                            @for (int i = 0; i < Model.AllUsers.Count; i++)
                            {
                                <div class="custom-control custom-checkbox">
                                    <input asp-for="ProjectId" value="@Model.Project.Id" class="form-control col" type="hidden" placeholder="Task name" />
                                    <input asp-for="@Model.AllUsers[i].IsSelected" type="checkbox" class="custom-control-input">
                                    <label asp-for="@Model.AllUsers[i].IsSelected" class="custom-control-label">
                                        <span class="d-flex align-items-center">
                                            <img alt="@Model.AllUsers[i].Username" src="~/assets/img/defaultUserIcon.jpg" class="avatar mr-2" />
                                            <span class="h6 mb-0" data-filter-by="text">@Model.AllUsers[i].Username</span>
                                        </span>
                                    </label>
                                    <input asp-for="@Model.AllUsers[i].UserId" type="hidden" />
                                    <input asp-for="@Model.AllUsers[i].Username" type="hidden" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <!--end of modal body-->
                <div class="modal-footer">
                    <button role="button" class="btn btn-primary" type="submit">
                        Done
                    </button>
                </div>
            </div>
        </div>
    </form>


    @*

        NEW COMMENT MODAL

    *@
    <div class="modal fade" id="new-comment-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a new comment {{commentModel.parentId}}</h5>
                    <button type="button" class="close btn btn-round" data-dismiss="modal">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <!--end of modal head-->
                <div class="modal-body">
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="task-add-details" role="tabpanel">
                            <div class="form-group row align-items-center">
                                <textarea v-model="commentModel.comment" class="form-control col" rows="3" placeholder="Insert your comment here..."></textarea>
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-primary float-right" type="button" data-dismiss="modal" v-on:click="AddNewComment">Add Comment</button>
                </div>
            </div>
        </div>
    </div>

    @*

        NEW TASK MODAL

    *@
    <form class="modal fade" id="task-add-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{this.modalTitle}}</h5>
                    <button type="button" class="close btn btn-round" data-dismiss="modal" aria-label="Close">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <!--end of modal head-->
                <ul class="nav nav-tabs nav-fill" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="task-add-details-tab" data-toggle="tab" href="#task-add-details" role="tab" aria-controls="task-add-details" aria-selected="true">Details</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="task-add-members-tab" data-toggle="tab" href="#task-add-members" role="tab" aria-controls="task-add-members" aria-selected="false">Members</a>
                    </li>
                </ul>
                <div class="modal-body">
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="task-add-details" role="tabpanel">
                            <h6>General Details</h6>
                            @*<input asp-for="ProjectId" value="@Model.Project.Id" class="form-control col" type="hidden" placeholder="Task name" />*@
                            <div class="form-group row align-items-center">
                                <label class="col-3">Name</label>
                                <input v-model="taskModel.name" class="form-control col" type="text" placeholder="Task name" />
                            </div>
                            <div class="form-group row align-items-center">
                                <label class="col-3">Description</label>
                                <textarea v-model="taskModel.description" class="form-control col" rows="3" placeholder="Task description"></textarea>
                            </div>
                            <div>
                                <hr>
                                <h6>Sub-tasks</h6>
                                <div class="input-group mb-3">
                                    <input v-model="subTask.description" type="text" class="form-control" placeholder="Enter a sub-task..." aria-describedby="button-addon2">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-primary" type="button" id="button-addon2" v-on:click="AddSubTask">Add</button>
                                    </div>
                                </div>
                                <ul class="list-group">

                                    <li v-for="(subTask, index) in taskModel.subTasks" class="list-group-item">
                                        <span class="text-primary">{{index+1}}</span>
                                        {{subTask.description}}
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="tab-pane fade" id="task-add-members" role="tabpanel">
                            <div class="users-manage" data-filter-list="form-group-users">
                                @*<div class="mb-3">
                                        <ul class="avatars text-center">
                                            <li v-for="user in this.projectModel.project.users">
                                                <img :alt="user.username" src="~/assets/img/defaultUserIcon.jpg" class="avatar" data-toggle="tooltip" :data-title="user.username" />
                                            </li>
                                        </ul>
                                    </div>*@
                                <div class="input-group input-group-round">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            <i class="material-icons">filter_list</i>
                                        </span>
                                    </div>
                                    <input type="search" class="form-control filter-list-input" placeholder="Filter members" aria-label="Filter Members">
                                </div>
                                <div class="form-group-users">

                                    <div class="custom-control custom-checkbox" v-for="(user, key, index) in projectModel.users" :key="index">
                                        <input type="checkbox" class="custom-control-input" :id="key" user="user.username" v-model="projectModel.users[key].isSelected">
                                        <label :for="key" class="custom-control-label">
                                            <span class="d-flex align-items-center">
                                                <img :alt="user.username" src="~/assets/img/defaultUserIcon.jpg" class="avatar mr-2" />
                                                <span class="h6 mb-0" data-filter-by="text">{{user.username}}</span>
                                            </span>
                                        </label>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--end of modal body-->
                <div class="modal-footer">
                    <button role="button" class="btn btn-primary" type="button" @@click="CreateTask" v-if="this.modalTitle === 'New Task'">
                        Create Task
                    </button>
                    <button role="button" class="btn btn-primary" type="button" @@click="UpdateTask" v-if="this.modalTitle === 'Edit Task'">
                        Update Task
                    </button>
                </div>
            </div>
        </div>
    </form>


    @*

        EDIT REQUIREMENT MODAL

    *@
    <div class="modal fade" id="requirement-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{requirementModalTitle}}</h5>
                    <button type="button" class="close btn btn-round" v-on:click="closeModal()">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <!--end of modal head-->
                <div class="modal-body">
                    <div>
                        <div class="row">
                            <div class="col-8">
                                <h6>Requirement Details</h6>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Title</label>
                                    <input v-model="requirementModel.name" class="form-control col" placeholder="Requirement title" id="reqname" />
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small></small>
                                    </div>
                                </div>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Description</label>
                                    <textarea v-model="requirementModel.description" class="form-control col" rows="3" placeholder="Requirement description" id="reqdescription" v-on:keyup="detectWords()" v-on:keyup.backspace="detectWords()"></textarea>
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small></small>
                                    </div>
                                </div>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Category</label>
                                    <select v-model="requirementModel.category" asp-items="Html.GetEnumSelectList<RequirementCategory>()" class="form-control col-4" id="reqcategory">
                                        <option value=""></option>
                                    </select>
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small></small>
                                    </div>
                                </div>
                                <div class="form-group row align-items-center">
                                    <label class="col-3">Priority</label>
                                    <select v-model="requirementModel.priority" asp-items="Html.GetEnumSelectList<Priority>()" class="form-control col-4" id="reqpriority">
                                        <option value=""></option>
                                    </select>
                                    <div id="form-validation">
                                        <i class="fas fa-check-circle"></i>
                                        <i class="fas fa-exclamation-circle"></i>
                                        <small></small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-4">
                                <h6>Quality Evaluation</h6>
                                <small>Optionality:</small>
                                <span class="float-right">
                                    <i class="fas fa-info-circle b-popover-primary"
                                       tabindex="0"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<b>Optionality Indicator</b>"
                                       data-content="
                                        <div>
                                        An Optionality Indicator reveals a requirement sentence that contains an optional aspect.
                                        </div>
                                        <hr />
                                        <b>Example indicators:</b>
                                        <i>possibly, eventually, if case, if possible, if appropriate, if needed.</i>
                                        ">
                                        </i>
                                </span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" :style="{width: this.optionalityPercentage + '%' }"></div>
                                </div>
                                <br />
                                <small>Subjectivity:</small>
                                <span class="float-right">
                                    <i class="fas fa-info-circle b-popover-primary"
                                       tabindex="0"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<b>Subjectivity Indicator</b>"
                                       data-content="
                                        <div>
                                        A Subjectivity Indicator reveals sentences that contain personal opinion.
                                        </div>
                                        <hr />
                                        <b>Example indicators:</b>
                                        <i>similar, better, similarly, worse, having in mind, take into account, take into consideration.</i>
                                        ">
                                        </i>
                                </span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" :style="{width: this.subjectivityPercentage + '%' }"></div>
                                </div>
                                <br />
                                <small>Vagueness:</small>
                                <span class="float-right">
                                    <i class="fas fa-info-circle b-popover-primary"
                                       tabindex="0"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<b>Vagueness Indicator</b>"
                                       data-content="
                                        <div>
                                        A Vagueness Indicator is pointed out
                                        if the sentence includes words
                                        holding inherent vagueness
                                        </div>
                                        <hr />
                                        <b>Example indicators:</b>
                                        <i>clear, easy, strong, good, bad, efficient, useful, significant, adequate, fast, recent, far, close, in front.</i>
                                        ">
                                        </i>
                                </span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" :style="{width: this.vaguenessPercentage + '%' }"></div>
                                </div>
                                <br />
                                <small>Weakness:</small>
                                <span class="float-right">
                                    <i class="fas fa-info-circle b-popover-primary"
                                       tabindex="0"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<b>Weakness Indicator</b>"
                                       data-content="
                                        <div>
                                        A Weakness Indicator is pointed out
                                        if a sentence contains a weak
                                        main verb.
                                        </div>
                                        <hr />
                                        <b>Example indicators:</b>
                                        <i>can, could, may.</i>
                                        ">
                                        </i>
                                </span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" :style="{width: this.weaknessPercentage + '%' }"></div>
                                </div>
                                <br />
                                <small>Implicity:</small>
                                <span class="float-right">
                                    <i class="fas fa-info-circle b-popover-primary"
                                       tabindex="0"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<b>Implicity Indicator</b>"
                                       data-content="
                                        <div>
                                        An Implicity Indicator is pointed out in a
                                        sentence when the subject is generic rather than
                                        specific.
                                        </div>
                                        <hr />
                                        <b>Example indicators:</b>
                                        <i>this, these, those, it, they, previous, next, following, last, above, below.</i>
                                        ">
                                        </i>
                                </span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" :style="{width: this.implicityPercentage + '%' }"></div>
                                </div>
                                <br />
                                <small>Multiplicity:</small>
                                <span class="float-right">
                                    <i class="fas fa-info-circle b-popover-primary"
                                       tabindex="0"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<b>Multiplicity Indicator</b>"
                                       data-content="
                                        <div>
                                        A Multiplicity Indicator is pointed if the sentence
                                        has more than one direct or indirect
                                        complement that specifies its subject.
                                        </div>
                                        <hr />
                                        <b>Example indicators:</b>
                                        <i>and, or, and/or.</i>
                                        ">
                                        </i>
                                </span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" :style="{width: this.multiplicityPercentage + '%' }"></div>
                                </div>
                                <br />
                                Quality Rating:
                                <b v-if="totalIndicators == 0" style="color:#28A745">A</b>
                                <b v-else-if="totalIndicators == 1" style="color:#FFC107">B</b>
                                <b v-else-if="totalIndicators == 2" style="color:#FFC107">C</b>
                                <b v-else-if="totalIndicators == 3" style="color:#DC3545">D</b>
                                <b v-else-if="totalIndicators == 4" style="color:#DC3545">E</b>
                                <b v-else-if="totalIndicators >= 5" style="color:#DC3545">F</b>
                            </div>
                        </div>
                    </div>
                </div>
                <!--end of modal body-->
                <div class="modal-footer">
                    <button type="button" role="button" class="btn btn-primary" @@click="UpdateRequirement" v-if="this.requirementModalTitle === 'Edit Requirement'">
                        Update Requirement
                    </button>
                    <button type="button" role="button" class="btn btn-primary" @@click="CreateRequirement" v-if="this.requirementModalTitle === 'New Requirement'">
                        Add Requirement
                    </button>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        $(document).ready(function () {
            $('[data-toggle="popover"]').popover({
                placement: 'right',
                trigger: 'hover'
            });
        });
    </script>

    <script>
        vueMixins.push({

            components: {
                draggable
            },
            data: function () {
                return {
                    projectModel: @Json.Serialize(Model),

                    totalTasks: 0,
                    totalTasksCompleted: 0,

                    objectIndex: 0,
                    requirementIndex: 0,

                    modalTitle: '',
                    edit: 'false',

                    requirementModalTitle: '',

                    commentModel: {
                        requirementId: '',
                        parentId: '',
                        parentComment: '',
                        parentFName: '',
                        parentLName: '',
                        comment: ''
                    },

                    requirementModel: {
                        id: '',
                        name: '',
                        description: '',
                        category: '',
                        priority: ''
                    },

                    taskModel: {
                        id: 0,
                        name: '',
                        description: '',
                        projectRequirementId: this.requirementId,
                        projectRequirementIndex: '',
                        progress: 0,
                        subTasks: [],
                        users: []
                    },

                    subTask: {
                        description: '',
                        isCompleted: false,
                        //projectTaskId: '',
                    },
                    user: {
                        userId: '',
                        username: '',
                        isSelected: false,
                    },
                    arrBacklog: [],
                    arrInProgress: [],
                    arrTested: [],
                    arrDone: [],

                    tree: [],

                    optionalityIndicators: [
                        {
                            word: 'possibly',
                            true: 0
                        },
                        {
                            word: 'eventually',
                            true: 0
                        },
                        {
                            word: 'if case',
                            true: 0
                        },
                        {
                            word: 'if possible',
                            true: 0
                        },
                        {
                            word: 'if appropriate',
                            true: 0
                        },
                        {
                            word: 'if needed',
                            true: 0
                        },
                    ],

                    subjectivityIndicators: [
                        {
                            word: 'similar',
                            true: 0
                        },
                        {
                            word: 'better',
                            true: 0
                        },
                        {
                            word: 'similarly',
                            true: 0
                        },
                        {
                            word: 'worse',
                            true: 0
                        },
                        {
                            word: 'having in mind',
                            true: 0
                        },
                        {
                            word: 'take into account',
                            true: 0
                        }
                    ],

                    vaguenessIndicators: [
                        {
                            word: 'clear',
                            true: 0
                        },
                        {
                            word: 'clearly',
                            true: 0
                        },
                        {
                            word: 'easy',
                            true: 0
                        },
                        {
                            word: 'easily',
                            true: 0
                        },
                        {
                            word: 'strong',
                            true: 0
                        },
                        {
                            word: 'good',
                            true: 0
                        },
                        {
                            word: 'bad',
                            true: 0
                        },
                        {
                            word: 'efficient',
                            true: 0
                        },
                        {
                            word: 'useful',
                            true: 0
                        },
                        {
                            word: 'significant',
                            true: 0
                        },
                        {
                            word: 'adequate',
                            true: 0
                        },
                        {
                            word: 'fast',
                            true: 0
                        },
                        {
                            word: 'recent',
                            true: 0
                        },
                        {
                            word: 'far',
                            true: 0
                        },
                        {
                            word: 'close',
                            true: 0
                        },
                        {
                            word: 'in front',
                            true: 0
                        },
                    ],

                    weaknessIndicators: [
                        {
                            word: 'can',
                            true: 0
                        },
                        {
                            word: 'could',
                            true: 0
                        },
                        {
                            word: 'may',
                            true: 0
                        }
                    ],

                    implicityIndicators: [
                        {
                            word: 'this',
                            true: 0
                        },
                        {
                            word: 'these',
                            true: 0
                        },
                        {
                            word: 'that',
                            true: 0
                        },
                        {
                            word: 'those',
                            true: 0
                        },
                        {
                            word: 'it',
                            true: 0
                        },
                        {
                            word: 'they',
                            true: 0
                        },
                        {
                            word: 'previous',
                            true: 0
                        },
                        {
                            word: 'next',
                            true: 0
                        },
                        {
                            word: 'following',
                            true: 0
                        },
                        {
                            word: 'last',
                            true: 0
                        },
                        {
                            word: 'above',
                            true: 0
                        },
                        {
                            word: 'below',
                            true: 0
                        },
                    ],

                    multiplicityIndicators: [
                        {
                            word: 'and',
                            true: 0
                        },
                        {
                            word: 'or',
                            true: 0
                        },
                        {
                            word: 'and/or',
                            true: 0
                        }
                    ],
                }
            },
            computed: {
                progressBarRounding: function () {
                    if (task.progress === 100) {
                        return 'border-radius: 320px'
                    } else {
                        return 'border-radius: .5rem 0px'
                    }
                },

                totalIndicators: function () { return (this.optionalityIndicatorCount + this.subjectivityIndicatorCount + this.vaguenessIndicatorCount + this.weaknessIndicatorCount + this.implicityIndicatorCount + this.multiplicityIndicatorCount) },

                optionalityIndicatorCount: function () { return this.optionalityIndicators.filter(word => word.true).length },
                optionalityPercentage: function () { return parseFloat(this.optionalityIndicatorCount * 300 / this.wordCount) },

                subjectivityIndicatorCount: function () { return this.subjectivityIndicators.filter(word => word.true).length },
                subjectivityPercentage: function () { return parseFloat(this.subjectivityIndicatorCount * 300 / this.wordCount) },

                vaguenessIndicatorCount: function () { return this.vaguenessIndicators.filter(word => word.true).length },
                vaguenessPercentage: function () { return parseFloat(this.vaguenessIndicatorCount * 300 / this.wordCount) },

                weaknessIndicatorCount: function () { return this.weaknessIndicators.filter(word => word.true).length },
                weaknessPercentage: function () { return parseFloat(this.weaknessIndicatorCount * 300 / this.wordCount) },

                implicityIndicatorCount: function () { return this.implicityIndicators.filter(word => word.true).length },
                implicityPercentage: function () { return parseFloat(this.implicityIndicatorCount * 300 / this.wordCount) },

                multiplicityIndicatorCount: function () { return this.multiplicityIndicators.filter(word => word.true).length },
                multiplicityPercentage: function () { return parseFloat(this.multiplicityIndicatorCount * 300 / this.wordCount) },

                wordCount() {
                    return this.requirementModel.description.trim().split(/\s+/).length;
                },

                allArrays: function () { return [...this.optionalityIndicators, ...this.subjectivityIndicators, ...this.vaguenessIndicators, ...this.weaknessIndicators, ...this.implicityIndicators, ...this.multiplicityIndicators] },
            },
            methods: {

                RenderComments: function () {
                    this.projectModel.project.projectRequirements.forEach(requirement => {
                        this.sortComments(requirement.comments);
                    })
                },

                sortComments: function(data) {

                    const tree = [];
                    const childOf = {};
                    data.forEach((item) => {
                        const { id, parentId } = item;
                        childOf[id] = childOf[id] || [];
                        item.children = childOf[id];
                        parentId ? (childOf[parentId] = childOf[parentId] || []).push(item) : tree.push(item);
                    });

                    console.log("tree",tree);

                    this.tree = tree;

                    return tree;
                },

                /*
                 * Progress Calculator
                */
                CalculateProgress: function () {

                    var taskCount = 0;
                    var tasksCompleted = 0;
                    var taskPercentage = 0;

                    this.projectModel.project.projectRequirements.forEach(requirement => {

                        taskCount += requirement.tasks.length;

                        requirement.tasks.forEach(task => {

                            var subTaskCount = task.subTasks.length;
                            var subTasksComplete = 0;
                            var taskPercent = 0;

                            if (task.isCompleted == true) {
                                taskPercentage += 100;
                                task.progress = 100;
                                tasksCompleted++;
                            } else {
                                task.subTasks.forEach(subtask => {
                                    if (subtask.isCompleted == true) {
                                        subTasksComplete++;
                                    }
                                });

                                if (subTaskCount > 0) {
                                    taskPercent = parseFloat(subTasksComplete * 100 / subTaskCount);
                                }

                                task.progress = taskPercent;
                                taskPercentage += taskPercent;
                            }
                        });
                    });

                    taskPercentage = taskPercentage.toFixed();
                    var projectPercentage = parseFloat(taskPercentage / taskCount);

                    this.totalTasks = taskCount;
                    this.totalTasksCompleted = tasksCompleted;

                    axios({
                        method: 'patch',
                        url: '/Projects/UpdateProjectProgress',
                        params: {
                            projectId: this.projectModel.project.id,
                            progress: projectPercentage
                        }
                    })
                    .then(res => {
                        this.projectModel.project.progress = projectPercentage;
                    });
                },


                /*
                 * Requirement Methods
                 */

                //Open New Requirement Modal
                openNewRequirementModal: function () {

                    this.requirementModel.category = '';
                    this.requirementModel.name = '';
                    this.requirementModel.description = '';
                    this.requirementModel.id = '';
                    this.requirementModel.priority = '';

                    this.requirementModalTitle = 'New Requirement';
                    this.detectWords();

                    $('#requirement-modal').modal('show');

                },

                CreateRequirement() {
                    this.loading = true;
                    $('#requirement-modal').modal('hide');
                    axios({
                        method: 'post',
                        url: '/Projects/CreateRequirement',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        data: {
                            projectId: this.projectModel.project.id,
                            requirementName: this.requirementModel.name,
                            requirementDescription: this.requirementModel.description,
                            requirementPriority: this.requirementModel.priority,
                            requirementCategory: this.requirementModel.category
                        }
                    })
                        .then(res => {
                            console.log(res.data);
                            this.projectModel.project.projectRequirements.push(res.data.requirement);
                            this.CalculateProgress();
                            this.RenderRequirements();
                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },

                // Open Edit Requirement Modal
                openEditRequirementModal: function (req, reqIndex) {

                    this.requirementModalTitle = 'Edit Requirement';

                    this.requirementModel = {
                        id: req.id,
                        name: req.name,
                        description: req.description,
                        priority: req.priority,
                        category: req.category
                    }

                    this.requirementIndex = reqIndex;
                    this.detectWords();

                    $('#requirement-modal').modal('show');
                },

                closeModal: function () {
                    $('#requirement-modal').modal('hide');

                    this.resetArrays();
                },

                //Update Requirement (Axios Request)
                UpdateRequirement() {
                    this.loading = true;
                    $('#requirement-modal').modal('hide');
                    axios({
                        method: 'post',
                        url: '/Projects/UpdateRequirement',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        data: {
                        projectId: this.projectModel.project.id,
                        requirementId: this.requirementModel.id,
                        requirementName: this.requirementModel.name,
                        requirementDescription: this.requirementModel.description,
                        requirementPriority: this.requirementModel.priority,
                        requirementCategory: this.requirementModel.category
                        }
                    })
                        .then(res => {

                            this.projectModel.project.projectRequirements.splice(this.requirementIndex, 1, res.data.requirement);

                            //requirement.name = res.data.requirement.name;
                            //requirement.description = res.data.requirement.description;
                            //requirement.priority = res.data.requirement.priority;
                            //requirement.category = res.data.requirement.category;

                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },

                DeleteRequirement(id, reqIndex) {

                        this.$swal({
                            title: 'Are you sure?',
                            text: 'Deleting this requirement cannot be undone',
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, Delete',
                            cancelButtonText: 'No, Keep it!',
                            showCloseButton: true,
                            showLoaderOnConfirm: true
                        }).then((result) => {
                            if (result.value) {
                                this.$swal('Deleted', 'You successfully deleted the requirement', 'success')

                                this.loading = true;
                                axios.delete('/Projects/DeleteRequirement/', {
                                    params: {
                                        reqId: id,
                                        projectId: this.projectModel.project.id
                                    }
                                })
                                    .then(res => {
                                        console.log(res);
                                        this.projectModel.project.projectRequirements.splice(reqIndex, 1);
                                        this.RenderKanban();
                                        this.CalculateProgress();
                                    })
                                    .catch(err => {
                                        console.log(err.message);
                                    })
                                    .then(() => {
                                        this.loading = false;
                                    });
                            } else {
                                this.$swal.close();
                            }
                        })
                },

                //Render Requirement Tab Blocks
                RenderRequirements: function () {
                    const TabBlock = {
                        s: {
                            animLen: 200
                        },

                        init: function () {
                            TabBlock.bindUIActions();
                            TabBlock.hideInactive();
                        },

                        bindUIActions: function () {
                            $('.tabBlock-tabs').on('click', '.tabBlock-tab', function () {
                                TabBlock.switchTab($(this));
                            });
                        },

                        hideInactive: function () {
                            var $tabBlocks = $('.tabBlock');

                            $tabBlocks.each(function (i) {
                                var
                                    $tabBlock = $($tabBlocks[i]),
                                    $panes = $tabBlock.find('.tabBlock-pane'),
                                    $activeTab = $tabBlock.find('.tabBlock-tab.is-active');

                                $panes.hide();
                                $($panes[$activeTab.index()]).show();
                            });
                        },

                        switchTab: function ($tab) {
                            var $context = $tab.closest('.tabBlock');

                            if (!$tab.hasClass('is-active')) {
                                $tab.siblings().removeClass('is-active');
                                $tab.addClass('is-active');

                                TabBlock.showPane($tab.index(), $context);
                            }
                        },

                        showPane: function (i, $context) {
                            var $panes = $context.find('.tabBlock-pane');

                            $panes.slideUp(TabBlock.s.animLen);
                            $($panes[i]).slideDown(TabBlock.s.animLen);
                        }
                    };

                    $(function () {
                        TabBlock.init();
                    });
                },

                /*
                 * Comment Methods
                */

                OpenCommentsModal: function (reqId, parentId, commentBody, parentFName, parentLName) {

                    this.commentModel.requirementId = reqId;
                    this.commentModel.parentId = parentId;
                    this.commentModel.parentComment = commentBody;
                    this.commentModel.parentFName = parentFName;
                    this.commentModel.parentLName = parentLName;

                    $('#new-comment-modal').modal('show');

                },

                AddNewComment: function () {
                    this.loading = true;

                    console.log(this.projectModel.project.id);
                    console.log(this.commentModel.requirementId);
                    console.log(this.commentModel.comment);

                    var formData = new FormData();

                    formData.append('projectId', this.projectModel.project.id);
                    formData.append('requirementId', this.commentModel.requirementId);
                    formData.append('commentBody', this.commentModel.comment);
                    formData.append('parentId', this.commentModel.parentId);

                    $('#requirement-modal').modal('hide');
                    axios({
                        method: 'post',
                        url: '/Projects/AddComment',
                        headers: {'Content-Type': 'multipart/form-data' },
                        data: formData
                    })
                        .then(res => {
                            console.log(res.data);
                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },

                /*
                 * Task Methods
                */

                // Open New-Task Modal
                OpenModal: function (requirementId, index) {

                    this.taskModel.id = 0;
                    this.taskModel.name = '';
                    this.taskModel.description = '';
                    this.taskModel.projectRequirementId = requirementId;
                    this.taskModel.projectRequirementIndex = index;
                    this.taskModel.subTasks = [];
                    this.taskModel.users = [];

                    this.modalTitle = 'New Task';

                    $('#task-add-modal').modal('show');

                },

                //Show Tasks (List)
                ShowTasks: function (requirementId) {

                    const chevron = "#chevron-" + requirementId;
                    const accordion = "#accordion-" + requirementId;

                    console.log(this.projectModel);
                    $(chevron).toggleClass("down");
                    $(accordion).toggle("slow");
                },

                //Show Task (Singular Task)
                ShowTask: function (taskId) {
                    console.log('hit' + taskId);
                    const chevron = "#chevron-" + taskId;
                    const task = "#task-" + taskId;

                    console.log(this.projectModel);
                    $(chevron).toggleClass("down");
                    $(task).toggle("slow");
                },

                //Show Sub-Tasks (List)
                ShowSubTasks: function (taskId) {

                    const chevron = "#subtask-chevron-" + taskId;
                    const accordion = "#accordion-" + taskId;

                    console.log(this.projectModel);
                    $(chevron).toggleClass("down");
                    $(accordion).toggle("slow");
                },

                //Add Sub-Task
                AddSubTask: function () {
                    const clone = Object.assign({}, this.subTask)
                    this.taskModel.subTasks.push(clone);
                    this.subTask = {
                        title: '',
                        completed: false,
                    };
                },

                //Create Task
                CreateTask() {
                    console.log(this.projectModel);
                    this.loading = true;
                    $('#task-add-modal').modal('hide');
                    axios({
                        method: 'post',
                        url: '/Projects/CreateTask',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        data: {
                        projectId: this.projectModel.project.id,
                        requirementId: this.taskModel.projectRequirementId,
                        taskName: this.taskModel.name,
                        taskDescription: this.taskModel.description,
                        subTasks: this.taskModel.subTasks,
                        users: this.projectModel.users
                        }
                    })
                        .then(res => {
                            console.log(res.data);
                            this.projectModel.project.projectRequirements[this.taskModel.projectRequirementIndex].tasks.push(res.data);
                            this.UpdateKanban(res.data);
                            this.CalculateProgress();

                            if ($("#accordion-" + res.data.projectRequirementId).is(":visible")) {
                            } else {
                                this.ShowTasks(res.data.projectRequirementId);
                            }

                            this.ShowTask(res.data.id);

                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },

                //Toggle Task Completion
                ToggleTaskComplete(task, taskIndex, reqIndex, isCompleted) {
                    axios({
                        method: 'patch',
                        url: '/Projects/ToggleTaskComplete',
                        params: {
                            taskId: task.id
                        }
                    })
                    .then(res => {
                        this.projectModel.project.projectRequirements[reqIndex].tasks[taskIndex].isCompleted = !isCompleted;
                        this.CalculateProgress();
                    })
                },

                //Edit Task (Populates Modal)
                EditTask(task, taskIndex, reqIndex) {
                    this.objectIndex = taskIndex;
                    this.requirementIndex = reqIndex;
                    console.log(reqIndex);
                    this.taskModel = {
                        id: task.id,
                        name: task.name,
                        description: task.description,
                        subTasks: task.subTasks,
                        users: task.users
                    }
                    this.modalTitle = 'Edit Task';
                    $('#task-add-modal').modal('show');
                },

                //Update Task (Axios Request)
                UpdateTask() {
                    console.log(this.projectModel);
                    this.loading = true;
                    $('#task-add-modal').modal('hide');
                    axios({
                        method: 'post',
                        url: '/Projects/UpdateTask',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        data: {
                        projectId: this.projectModel.project.id,
                        requirementId: this.taskModel.projectRequirementId,
                        taskId: this.taskModel.id,
                        taskName: this.taskModel.name,
                        taskDescription: this.taskModel.description,
                        subTasks: this.taskModel.subTasks,
                        users: this.projectModel.users
                        }
                    })
                        .then(res => {
                            console.log(res.data);
                            console.log("req" + this.reqIndex);
                            console.log("obj" + this.objectIndex);

                            this.projectModel.project.projectRequirements[this.requirementIndex].tasks.splice(this.objectIndex, 1, res.data);
                            this.CalculateProgress();
                            this.RenderKanban();
                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },

                // Delete Task
                DeleteTask(id, taskIndex, reqIndex) {

                        this.$swal({
                            title: 'Are you sure?',
                            text: 'Deleting this task cannot be undone',
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, Delete',
                            cancelButtonText: 'No, Keep it!',
                            showCloseButton: true,
                            showLoaderOnConfirm: true
                        }).then((result) => {
                            if (result.value) {
                                this.$swal('Deleted', 'You successfully deleted the task', 'success')

                                this.loading = true;
                                axios.delete('/Projects/DeleteTask/', {
                                    params: {
                                        taskId: id,
                                        projectId: this.projectModel.project.id
                                    }
                                })
                                    .then(res => {
                                        console.log(res);
                                        this.projectModel.project.projectRequirements[reqIndex].tasks.splice(taskIndex, 1);
                                        this.RenderKanban();
                                        this.CalculateProgress();
                                    })
                                    .catch(err => {
                                        console.log(err.message);
                                    })
                                    .then(() => {
                                        this.loading = false;
                                    });

                            } else {
                                this.$swal.close();
                            }
                        })
                },

                // Toggle Sub-Task Completion
                subtaskToggle: function (subTaskId, subTaskIndex, taskIndex, reqIndex, isCompleted) {

                    axios({
                        method: 'patch',
                        url: '/Projects/UpdateSubTask',
                        params: {
                            taskId: subTaskId
                        }
                    })
                        .then(res => {
                            console.log(res.data);
                            this.projectModel.project.projectRequirements[reqIndex].tasks[taskIndex].subTasks[subTaskIndex].isCompleted = !isCompleted;
                            this.CalculateProgress();
                        });
                },

                // Moment time helper
                moment(...args) {
                    return moment(...args);
                },
                GetDateFromNow(date) {
                    return this.$moment(date).fromNow();
                },

                /*
                 * Kanban Board Functions
                 */

                // When a card is moved to a new column
                onAdd: function (event, status) {

                    let id = event.item.getAttribute('data-id');

                    axios({
                        method: 'patch',
                        url: '/Projects/KanbanMoveItem',
                        data: {
                            Status: status,
                            TaskId: id
                        }
                    });
                },

                // Render The Kanban's Cards
                RenderKanban: function () {

                    this.arrBacklog = [];
                    this.arrInProgress = [];
                    this.arrTested = [];
                    this.arrDone = [];

                    this.projectModel.project.projectRequirements.forEach(requirement => {
                    requirement.tasks.forEach(task => {
                        switch (task.status) {
                            case 0:
                                this.arrBacklog.push(task);
                                break;
                            case 1:
                                this.arrInProgress.push(task);
                                break;
                            case 2:
                                this.arrTested.push(task);
                                break;
                            case 3:
                                this.arrDone.push(task);
                                break;
                        }
                    });
                });
                },

                // Update the Kanban's Cards
                UpdateKanban: function (task) {
                switch (task.status) {
                    case 0:
                        console.log(task);
                        this.arrBacklog.push(task);
                        break;
                    case 1:
                        this.arrInProgress.push(task);
                        break;
                    case 2:
                        this.arrTested.push(task);
                        break;
                    case 3:
                        this.arrDone.push(task);
                        break;
                }
                },

                /*
                 * Word Search Functions
                 */

                detectWords: function () {

                    //For each word in the array
                    this.optionalityIndicators.forEach(word => {
                        if (this.wordInString(this.requirementModel.description, word.word)) {
                            word.true = 1;
                        } else {
                            word.true = 0;
                        }
                    })

                    this.subjectivityIndicators.forEach(word => {
                        if (this.wordInString(this.requirementModel.description, word.word)) {
                            word.true = 1;
                        } else {
                            word.true = 0;
                        }
                    })

                    this.vaguenessIndicators.forEach(word => {
                        if (this.wordInString(this.requirementModel.description, word.word)) {
                            word.true = 1;
                        } else {
                            word.true = 0;
                        }
                    })

                    this.weaknessIndicators.forEach(word => {
                        if (this.wordInString(this.requirementModel.description, word.word)) {
                            word.true = 1;
                        } else {
                            word.true = 0;

                            //if (this.subjectivityIndicators.every(word => !word.true)) {
                            //    console.log('yep');
                            //}
                        }
                    })

                    this.implicityIndicators.forEach(word => {
                        if (this.wordInString(this.requirementModel.description, word.word)) {
                            word.true = 1;
                        } else {
                            word.true = 0;
                        }
                    })


                    this.multiplicityIndicators.forEach(word => {
                        if (this.wordInString(this.requirementModel.description, word.word)) {
                            word.true = 1;
                        } else {
                            word.true = 0;
                        }
                    })

                },

                // searches for words in a string
                wordInString: function (s, word) {
                    return new RegExp('\\b' + word + '\\b', 'i').test(s);
                },

                // Reset indicator arrays
                resetArrays: function () {
                    this.allArrays.forEach(word => {
                        word.true = 0;
                    });
                },
            },
            beforeMount() {
                this.RenderKanban();
                this.CalculateProgress();
                this.RenderRequirements();
                this.RenderComments();
            },
            mounted() {
                this.$root.$on('component1', (payload) => {
                    console.log(payload);
                    this.OpenCommentsModal(payload.reqId, payload.parentId, payload.commentBody, payload.parentFName, payload.parentLName);
                })
            }
        });

    </script>

    <script>

    </script>
}
