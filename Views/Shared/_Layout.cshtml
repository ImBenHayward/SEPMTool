@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Identity
@using SEPMTool.Models;
@inject IHostingEnvironment HostingEnvironment
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" http-equiv="X-UA-Compatible" content="IE=edge, chrome=1" />
    <meta name="description" content="A Software Engineering Project Management Tool by Ben Hayward">
    <title>@ViewBag.Title</title>
    <link href="~/assets/img/favicon.ico" rel="icon" type="image/x-icon">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Gothic+A1" rel="stylesheet">
    <link href="~/dist/assets/css/theme.css" rel="stylesheet" type="text/css" media="all" />
    <link href="https://cdn.datatables.net/1.10.20/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" media="all" />
    @*<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.css" rel="stylesheet" type="text/css" media="all" />*@


    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css" />

    @*<environment include="Development">
            <link rel="stylesheet" href="~/dist/asses/css/theme.css" />
        </environment>
        <environment exclude="Development">
            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
                  asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
                  asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
                  crossorigin="anonymous"
                  integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" />
        </environment>*@
</head>

<body>
    <div id="mainContent" v-cloak>
        <div class="layout layout-nav-side">
            @if (SignInManager.IsSignedIn(User))
            {
                <div class="navbar navbar-expand-lg bg-dark navbar-dark sticky-top">

                    <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">
                        <img alt="SEPM Tool" src="~/assets/img/logo.svg" />
                    </a>
                    <div class="d-flex align-items-center">
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbar-collapse" aria-controls="navbar-collapse" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="d-block d-lg-none ml-2">
                            <div class="dropdown">
                                <a href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <img alt="Image" src="~/assets/img/defaultUserIcon.jpg" class="avatar" />
                                </a>
                                <div class="dropdown-menu dropdown-menu-right">
                                    <a href="nav-side-user.html" class="dropdown-item">Profile</a>
                                    <a href="utility-account-settings.html" class="dropdown-item">Account Settings</a>
                                    <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                        <button class="dropdown-item" type="submit">Log Out</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="collapse navbar-collapse flex-column" id="navbar-collapse">
                        <ul class="navbar-nav d-lg-block">

                            <li class="nav-item">
                                <a class="nav-link" asp-area="" asp-controller="Projects" asp-action="Index">Overview</a>
                            </li>

                        </ul>
                        <hr>
                        <div class="d-none d-lg-block w-100">
                            <span class="text-small text-muted">Quick Links</span>
                            <ul class="nav nav-small flex-column mt-2">
                                <li class="nav-item">
                                    <a class="nav-link" asp-area="" asp-controller="Projects" asp-action="Index">
                                        My Projects
                                    </a>
                                    <a class="nav-link" asp-area="" asp-controller="Projects" asp-action="Index">
                                        Project Archive
                                    </a>
                                </li>
                            </ul>
                            <hr>
                        </div>
                        <div>
                            <form>
                                <div class="input-group input-group-dark input-group-round">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            <i class="material-icons">search</i>
                                        </span>
                                    </div>
                                    <input type="search" class="form-control form-control-dark" placeholder="Search" aria-label="Search app">
                                </div>
                            </form>
                            <div class="dropdown mt-2">
                                <button class="btn btn-primary btn-block" type="button" id="newContentButton" onclick="location.href='@Url.Action("NewProject", "Projects")'">
                                    New Project
                                </button>
                                <button class="btn btn-primary btn-block" type="button" id="newContentButton" v-on:click="GetNotifications()">
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="d-none d-lg-block">
                        <div class="dropup">
                            <a href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <img alt="Image" src="~/assets/img/defaultUserIcon.jpg" class="avatar" />
                            </a>
                            <div class="dropdown-menu">
                                <a href="nav-side-user.html" class="dropdown-item">Profile</a>
                                <a href="utility-account-settings.html" class="dropdown-item">Account Settings</a>
                                <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                    <button class="dropdown-item" type="submit">Log Out</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {

            }
            <div class="main-container">
                <div class="navbar bg-white breadcrumb-bar">
                    <breadcrumb>
                    </breadcrumb>
                    <ul class="nav nav-pills">
                        <li class="nav-item dropdown allow-focus">
                            <a href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <div class="d-flex align-items-center"><i :class="{'fa':true, 'fa-lg':true, 'fa-bell':true, 'notification-bell':true, 'notification-empty':(this.UnreadNotificationCount == 0)}"></i> <span class="badge lg badge-danger" style="width: 17px" v-show="UnreadNotificationCount > 0">{{UnreadNotificationCount}}</span></div>
                            </a>
                            <div class="dropdown-menu">
                                <ul class="list-group list-group-activity">
                                    <li class="list-group-item">
                                        <span>Notifications ({{UnreadNotificationCount}})</span>
                                        <a href="#" class="font-weight-bolder float-right" v-on:click="MarkAllAsRead">Mark all as read</a>
                                    </li>
                                    <li :class="{'list-group-item':true, 'notification-bg-read':(item.isRead == true)}" v-for="item in this.firstResults">
                                        <div class="media align-items-center">
                                            <ul class="avatars">
                                                <li>
                                                    <div class="avatar bg-success" v-if="item.notification.type === 0">
                                                        <i class="material-icons" v-if="item.notification.type === 0">create_new_folder</i>
                                                    </div>

                                                    <div class="avatar bg-primary" v-if="item.notification.type === 1">
                                                        <i class="material-icons" v-if="item.notification.type === 1">edit</i>
                                                    </div>

                                                    <div class="avatar bg-danger" v-if="item.notification.type === 2">
                                                        <i class="material-icons" v-if="item.notification.type === 2">delete_forever</i>
                                                    </div>
                                                </li>
                                                <li>
                                                    <img alt="Peggy Brown" src="~/assets/img/avatar-female-2.jpg" class="avatar font-weight" data-title="Peggy Brown" data-toggle="tooltip" data-filter-by="data-title" />
                                                </li>
                                            </ul>
                                            <div class="media-body d-flex justify-content-between align-items-center">
                                                <div>
                                                    <a href="#" :class="{'font-weight-bolder':(item.isRead == false)}">{{item.notification.title}}</a>
                                                    <br>
                                                    <span :class="{'font-weight-bolder':(item.isRead == false), 'text-small':true}" data-filter-by="text">{{item.notification.body}}</span>
                                                    <br />
                                                    <small>{{GetDateFromNow(item.notification.dateTime)}}</small>
                                                </div>
                                                <div class="material-icons">
                                                    <a href="#" v-on:click="ToggleIsRead(item.notificationId)" v-if="item.isRead == false"><i class="far fa-envelope"></i></a>
                                                    <a href="#" v-on:click="ToggleIsRead(item.notificationId)" v-else><i class="far fa-envelope-open"></i></a>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                    <li class="list-group-item text-center"><a href="#" class="font-weight-bolder" onclick="location.href='@Url.Action("Index", "Notifications")'">View All</a></li>

                                </ul>
                            </div>
                        </li>
                    </ul>
                </div>
                <alerts></alerts>
                @RenderBody()
            </div>
        </div>
    </div>

    <!-- Required vendor scripts (Do not remove) -->
    <script type="text/javascript" src="~/assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="~/assets/js/popper.min.js"></script>
    <script type="text/javascript" src="~/dist/assets/js/bootstrap.js"></script>

    <!-- Optional Vendor Scripts (Remove the plugin script here and comment initializer script out of index.js if site does not use that feature) -->
    <!-- Autosize - resizes textarea inputs as user types -->
    <script type="text/javascript" src="~/assets/js/autosize.min.js"></script>
    <!-- Flatpickr (calendar/date/time picker UI) -->
    <script type="text/javascript" src="~/assets/js/flatpickr.min.js"></script>
    <!-- Prism - displays formatted code boxes -->
    <script type="text/javascript" src="~/assets/js/prism.js"></script>
    <!-- Shopify Draggable - drag, drop and sort items on page -->
    <script type="text/javascript" src="~/assets/js/draggable.bundle.legacy.js"></script>
    <script type="text/javascript" src="~/assets/js/swap-animation.js"></script>
    <!-- Dropzone - drag and drop files onto the page for uploading -->
    <script type="text/javascript" src="~/assets/js/dropzone.min.js"></script>
    <!-- List.js - filter list elements -->
    <script type="text/javascript" src="~/assets/js/list.min.js"></script>

    <!-- Required theme scripts (Do not remove) -->
    <script type="text/javascript" src="~/dist/assets/js/theme.js"></script>

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    @*<script src="https://code.jquery.com/jquery-3.3.1.js"></script>*@
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap4.min.js"></script>

    @*<script src="~/js/dist/site.js" asp-append-version="true"></script>*@

    @*<environment include="Development">
            <script src="~/lib/jquery/dist/jquery.js"></script>
            <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.js"></script>
            <script type="text/javascript" src="~/dist/assets/js/bootstrap.js"></script>
            <script type="text/javascript" src="~/dist/assets/js/theme.js"></script>
        </environment>
        <environment exclude="Development">
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
                    asp-fallback-src="~/lib/jquery/dist/jquery.min.js"
                    asp-fallback-test="window.jQuery"
                    crossorigin="anonymous"
                    integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=">
            </script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"
                    asp-fallback-src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"
                    asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal"
                    crossorigin="anonymous"
                    integrity="sha384-xrRywqdh3PHs8keKZN+8zzc5TX0GRTLCcmivcbNJWm2rs5C8PRhcEn3czEjhAO9o">
            </script>
        </environment>*@
    @*<script src="~/js/site.js" asp-append-version="true"></script>*@

    <script src="~/build/site.js" asp-append-version="true"></script>

    @RenderSection("Scripts", required: false)

    <script>
        $(document).on('click', '.allow-focus .dropdown-menu', function (e) {
            e.stopPropagation();
        });
    </script>

    <script>
        vueMixins.push({

            data: function () {
                return {
                    notificationModel: [],
                    notificationUnreadCount: ''
                }
            },
            methods: {
                GetNotifications: function () {
                    axios({
                        method: 'post',
                        url: '/Notifications/GetNotificationsForUser'
                    })
                        .then(res => {
                            this.notificationModel = res.data.notifications;
                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },
                //CheckForNotifications: function () {
                //    setInterval(() => {
                //        this.GetNotifications();
                //    }, 3000)
                //},
                ToggleIsRead: function (id) {

                    console.log(id);

                    axios({
                        method: 'patch',
                        url: '/Notifications/ToggleIsRead',
                        params: {
                            notificationId: id
                        }
                    })
                        .then(res => {
                            this.GetNotifications();
                        });
                },
                MarkAllAsRead: function () {
                    axios({
                        method: 'post',
                        url: '/Notifications/MarkAllAsRead'
                    })
                        .then(res => {
                            this.GetNotifications();
                        })
                        .catch(err => {
                            console.log(err.message);
                        })
                        .then(() => {
                            this.loading = false;
                        });
                },
                ViewAllNotifications: function () {
                    console.log('hello')
                    axios({
                        method: 'post',
                        url: '/Notifications/Index'
                    })
                },
                moment(...args) {
                    return moment(...args);
                },
                GetDateFromNow(date) {
                    return this.$moment(date).fromNow();
                }
            },
            computed: {
                UnreadNotificationCount: function () {
                    return this.notificationModel.filter(notification => !notification.isRead).length
                },
                firstResults() {
                    return this.notificationModel.slice(0, 4);
                }
            },
            beforeMount() {
                this.GetNotifications();
                //this.CheckForNotifications();
            }
        });
    </script>

    <script>
    var app = new Vue({
        el: "#mainContent",
        mixins: vueMixins,
    });
    @if (HostingEnvironment.IsDevelopment())
    {
        @:Vue.config.devtools = true;
    }
    </script>

</body>
</html>
